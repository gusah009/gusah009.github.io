{"version":3,"file":"component---src-pages-index-tsx-1c39fcaf757a409e2dc2.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/decode-uri-component/index.js","webpack://gatsby-starter-default/./node_modules/filter-obj/index.js","webpack://gatsby-starter-default/./node_modules/query-string/index.js","webpack://gatsby-starter-default/./node_modules/split-on-first/index.js","webpack://gatsby-starter-default/./node_modules/strict-uri-encode/index.js","webpack://gatsby-starter-default/./src/components/Main/ProfileImage.tsx","webpack://gatsby-starter-default/./src/components/Main/Introduction.tsx","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["'use strict';\n\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\nfunction decodeComponents(components, split) {\n  try {\n    // Try to decode the entire string first\n    return [decodeURIComponent(components.join(''))];\n  } catch (err) {\n    // Do nothing\n  }\n  if (components.length === 1) {\n    return components;\n  }\n  split = split || 1;\n\n  // Split the array in 2 parts\n  var left = components.slice(0, split);\n  var right = components.slice(split);\n  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input);\n  } catch (err) {\n    var tokens = input.match(singleMatcher) || [];\n    for (var i = 1; i < tokens.length; i++) {\n      input = decodeComponents(tokens, i).join('');\n      tokens = input.match(singleMatcher) || [];\n    }\n    return input;\n  }\n}\nfunction customDecodeURIComponent(input) {\n  // Keep track of all the replacements and prefill the map with the `BOM`\n  var replaceMap = {\n    '%FE%FF': '\\uFFFD\\uFFFD',\n    '%FF%FE': '\\uFFFD\\uFFFD'\n  };\n  var match = multiMatcher.exec(input);\n  while (match) {\n    try {\n      // Decode as big chunks as possible\n      replaceMap[match[0]] = decodeURIComponent(match[0]);\n    } catch (err) {\n      var result = decode(match[0]);\n      if (result !== match[0]) {\n        replaceMap[match[0]] = result;\n      }\n    }\n    match = multiMatcher.exec(input);\n  }\n\n  // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n  replaceMap['%C2'] = '\\uFFFD';\n  var entries = Object.keys(replaceMap);\n  for (var i = 0; i < entries.length; i++) {\n    // Replace all decoded components\n    var key = entries[i];\n    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n  }\n  return input;\n}\nmodule.exports = function (encodedURI) {\n  if (typeof encodedURI !== 'string') {\n    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n  }\n  try {\n    encodedURI = encodedURI.replace(/\\+/g, ' ');\n\n    // Try the built in decoder first\n    return decodeURIComponent(encodedURI);\n  } catch (err) {\n    // Fallback to a more advanced decoder\n    return customDecodeURIComponent(encodedURI);\n  }\n};","'use strict';\n\nmodule.exports = function (obj, predicate) {\n  var ret = {};\n  var keys = Object.keys(obj);\n  var isArr = Array.isArray(predicate);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var val = obj[key];\n    if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n      ret[key] = val;\n    }\n  }\n  return ret;\n};","'use strict';\n\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\nconst isNullOrUndefined = value => value === null || value === undefined;\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      return key => (result, value) => {\n        const index = result.length;\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, [encode(key, options), '[', index, ']'].join('')];\n        }\n        return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];\n      };\n    case 'bracket':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, [encode(key, options), '[]'].join('')];\n        }\n        return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n      };\n    case 'colon-list-separator':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, [encode(key, options), ':list='].join('')];\n        }\n        return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n      };\n    case 'comma':\n    case 'separator':\n    case 'bracket-separator':\n      {\n        const keyValueSep = options.arrayFormat === 'bracket-separator' ? '[]=' : '=';\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          }\n\n          // Translate null to an empty string so that it doesn't serialize as 'null'\n          value = value === null ? '' : value;\n          if (result.length === 0) {\n            return [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n          }\n          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n        };\n      }\n    default:\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, encode(key, options)];\n        }\n        return [...result, [encode(key, options), '=', encode(value, options)].join('')];\n      };\n  }\n}\nfunction parserForArrayFormat(options) {\n  let result;\n  switch (options.arrayFormat) {\n    case 'index':\n      return (key, value, accumulator) => {\n        result = /\\[(\\d*)\\]$/.exec(key);\n        key = key.replace(/\\[\\d*\\]$/, '');\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n        accumulator[key][result[1]] = value;\n      };\n    case 'bracket':\n      return (key, value, accumulator) => {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n    case 'colon-list-separator':\n      return (key, value, accumulator) => {\n        result = /(:list)$/.exec(key);\n        key = key.replace(/:list$/, '');\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n    case 'comma':\n    case 'separator':\n      return (key, value, accumulator) => {\n        const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n        const isEncodedArray = typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n        value = isEncodedArray ? decode(value, options) : value;\n        const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n        accumulator[key] = newValue;\n      };\n    case 'bracket-separator':\n      return (key, value, accumulator) => {\n        const isArray = /(\\[\\])$/.test(key);\n        key = key.replace(/\\[\\]$/, '');\n        if (!isArray) {\n          accumulator[key] = value ? decode(value, options) : value;\n          return;\n        }\n        const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n        if (accumulator[key] === undefined) {\n          accumulator[key] = arrayValue;\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], arrayValue);\n      };\n    default:\n      return (key, value, accumulator) => {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n  }\n}\nfunction validateArrayFormatSeparator(value) {\n  if (typeof value !== 'string' || value.length !== 1) {\n    throw new TypeError('arrayFormatSeparator must be single character string');\n  }\n}\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n  return value;\n}\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n  return value;\n}\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);\n  }\n  return input;\n}\nfunction removeHash(input) {\n  const hashStart = input.indexOf('#');\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n  return input;\n}\nfunction getHash(url) {\n  let hash = '';\n  const hashStart = url.indexOf('#');\n  if (hashStart !== -1) {\n    hash = url.slice(hashStart);\n  }\n  return hash;\n}\nfunction extract(input) {\n  input = removeHash(input);\n  const queryStart = input.indexOf('?');\n  if (queryStart === -1) {\n    return '';\n  }\n  return input.slice(queryStart + 1);\n}\nfunction parseValue(value, options) {\n  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n    value = Number(value);\n  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n    value = value.toLowerCase() === 'true';\n  }\n  return value;\n}\nfunction parse(query, options) {\n  options = Object.assign({\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ',',\n    parseNumbers: false,\n    parseBooleans: false\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const formatter = parserForArrayFormat(options);\n\n  // Create an object with no prototype\n  const ret = Object.create(null);\n  if (typeof query !== 'string') {\n    return ret;\n  }\n  query = query.trim().replace(/^[?#&]/, '');\n  if (!query) {\n    return ret;\n  }\n  for (const param of query.split('&')) {\n    if (param === '') {\n      continue;\n    }\n    let [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n    // Missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n    value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n    formatter(decode(key, options), value, ret);\n  }\n  for (const key of Object.keys(ret)) {\n    const value = ret[key];\n    if (typeof value === 'object' && value !== null) {\n      for (const k of Object.keys(value)) {\n        value[k] = parseValue(value[k], options);\n      }\n    } else {\n      ret[key] = parseValue(value, options);\n    }\n  }\n  if (options.sort === false) {\n    return ret;\n  }\n  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n    const value = ret[key];\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n    return result;\n  }, Object.create(null));\n}\nexports.extract = extract;\nexports.parse = parse;\nexports.stringify = (object, options) => {\n  if (!object) {\n    return '';\n  }\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ','\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';\n  const formatter = encoderForArrayFormat(options);\n  const objectCopy = {};\n  for (const key of Object.keys(object)) {\n    if (!shouldFilter(key)) {\n      objectCopy[key] = object[key];\n    }\n  }\n  const keys = Object.keys(objectCopy);\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n  return keys.map(key => {\n    const value = object[key];\n    if (value === undefined) {\n      return '';\n    }\n    if (value === null) {\n      return encode(key, options);\n    }\n    if (Array.isArray(value)) {\n      if (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n        return encode(key, options) + '[]';\n      }\n      return value.reduce(formatter(key), []).join('&');\n    }\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(x => x.length > 0).join('&');\n};\nexports.parseUrl = (url, options) => {\n  options = Object.assign({\n    decode: true\n  }, options);\n  const [url_, hash] = splitOnFirst(url, '#');\n  return Object.assign({\n    url: url_.split('?')[0] || '',\n    query: parse(extract(url), options)\n  }, options && options.parseFragmentIdentifier && hash ? {\n    fragmentIdentifier: decode(hash, options)\n  } : {});\n};\nexports.stringifyUrl = (object, options) => {\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    [encodeFragmentIdentifier]: true\n  }, options);\n  const url = removeHash(object.url).split('?')[0] || '';\n  const queryFromUrl = exports.extract(object.url);\n  const parsedQueryFromUrl = exports.parse(queryFromUrl, {\n    sort: false\n  });\n  const query = Object.assign(parsedQueryFromUrl, object.query);\n  let queryString = exports.stringify(query, options);\n  if (queryString) {\n    queryString = \"?\".concat(queryString);\n  }\n  let hash = getHash(object.url);\n  if (object.fragmentIdentifier) {\n    hash = \"#\".concat(options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier);\n  }\n  return \"\".concat(url).concat(queryString).concat(hash);\n};\nexports.pick = (input, filter, options) => {\n  options = Object.assign({\n    parseFragmentIdentifier: true,\n    [encodeFragmentIdentifier]: false\n  }, options);\n  const {\n    url,\n    query,\n    fragmentIdentifier\n  } = exports.parseUrl(input, options);\n  return exports.stringifyUrl({\n    url,\n    query: filterObject(query, filter),\n    fragmentIdentifier\n  }, options);\n};\nexports.exclude = (input, filter, options) => {\n  const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n  return exports.pick(input, exclusionFilter, options);\n};","'use strict';\n\nmodule.exports = (string, separator) => {\n  if (!(typeof string === 'string' && typeof separator === 'string')) {\n    throw new TypeError('Expected the arguments to be of type `string`');\n  }\n  if (separator === '') {\n    return [string];\n  }\n  const separatorIndex = string.indexOf(separator);\n  if (separatorIndex === -1) {\n    return [string];\n  }\n  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];\n};","'use strict';\n\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => \"%\".concat(x.charCodeAt(0).toString(16).toUpperCase()));","import React, { FunctionComponent } from 'react';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\n\ntype ProfileImageProps = {\n  profileImage: IGatsbyImageData;\n};\n\nconst ProfileImage: FunctionComponent<ProfileImageProps> = function ({\n  profileImage,\n}) {\n  return (\n    <GatsbyImage\n      className=\" w-20 h-20 md:w-32 md:h-32 mb-8 rounded-full\"\n      image={profileImage}\n      alt=\"Profile Image\"\n    />\n  );\n};\n\nexport default ProfileImage;\n","import React, { FunctionComponent } from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport ProfileImage from 'components/Main/ProfileImage';\n\ntype IntroductionProps = {\n  profileImage: IGatsbyImageData;\n};\n\nconst Introduction: FunctionComponent<IntroductionProps> = function ({\n  profileImage,\n}) {\n  return (\n    // Background\n    <div className=\"w-full bg-gradient-to-bl from-gray-700 via-gray-900 to-black text-white\">\n      {/* // Wrapper */}\n      <div className=\"flex flex-col justify-center items-start w-full h-72 md:w-[725px] lg:w-[840px] md:h-96 m-auto px-5 md:px-0\">\n        <ProfileImage profileImage={profileImage} />\n\n        <div>\n          {/* // SubTitle */}\n          <div className=\" text-sm md:text-xl font-semibold\">안녕하세요!</div>\n          {/* // Title */}\n          <div className=\"mt-1 flex flex-wrap whitespace-pre text-2xl md:text-3xl font-semibold\">\n            항상\n            <div className=\" text-blue-300 \"> \"왜?\" </div>를 고민하는 개발자\n            정현모입니다.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Introduction;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport { PostFrontmatterType } from 'types/PostItem.types';\n\ntype PostItemProps = PostFrontmatterType & { link: string };\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) {\n  return (\n    // PostItemWrapper\n    <Link\n      to={link}\n      className=\"flex flex-col rounded-lg shadow-md cursor-pointer hover:shadow-lg\"\n    >\n      {/* ThumbnailImage */}\n      <GatsbyImage\n        className=\"w-full h-44 rounded-lg object-cover\"\n        image={gatsbyImageData}\n        alt=\"Post Item Image\"\n      />\n      {/* PostItemContent */}\n      <div className=\" flex-1 flex flex-col p-4\">\n        {/* Title */}\n        <div className=\"h-14 overflow-hidden mb-1 text-ellipsis whitespace-normal break-words text-xl font-bold line-clamp-2\">\n          {title}\n        </div>\n        {/* Date */}\n        <div className=\"text-sm font-normal opacity-70\">{date}</div>\n        {/* Category */}\n        <div className=\"flex flex-wrap my-2 space-x-1\">\n          {categories.map(category => (\n            // CategoryItem\n            <div\n              className=\"my-0.5 py-1 px-2 rounded-md bg-teal-700 text-sm font-semibold text-white\"\n              key={category}\n            >\n              {category}\n            </div>\n          ))}\n        </div>\n        {/* Summary */}\n        <div className=\"h-12 overflow-hidden mt-auto text-ellipsis whitespace-normal break-words text-base opacity-80 line-clamp-2\">\n          {summary}\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default PostItem;\n","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react';\nimport { PostListItemType } from 'types/PostItem.types';\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  postList: PostListItemType[];\n};\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10;\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n): useInfiniteScrollType {\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\n    useRef<HTMLDivElement>(null);\n  const observer: MutableRefObject<IntersectionObserver | null> =\n    useRef<IntersectionObserver>(null);\n  const [count, setCount] = useState<number>(1);\n\n  const postListByCategory = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { categories },\n          },\n        }: PostListItemType) =>\n          selectedCategory !== 'All'\n            ? categories.includes(selectedCategory)\n            : true,\n      ),\n    [selectedCategory],\n  );\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver((entries, observer) => {\n      if (!entries[0].isIntersecting) return;\n\n      setCount(value => value + 1);\n      observer.unobserve(entries[0].target);\n    });\n  }, []);\n\n  useEffect(() => setCount(1), [selectedCategory]);\n\n  useEffect(() => {\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0 ||\n      observer.current === null\n    )\n      return;\n\n    observer.current.observe(\n      containerRef.current.children[containerRef.current.children.length - 1],\n    );\n  }, [count, selectedCategory]);\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  };\n};\n\nexport default useInfiniteScroll;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport PostItem from 'components/Main/PostItem';\nimport { PostListItemType } from 'types/PostItem.types';\nimport useInfiniteScroll, {\n  useInfiniteScrollType,\n} from 'hooks/useInfiniteScroll';\n\ntype PostListProps = {\n  selectedCategory: string;\n  posts: PostListItemType[];\n};\n\nconst PostList: FunctionComponent<PostListProps> = function ({\n  selectedCategory,\n  posts,\n}) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts,\n  );\n\n  return (\n    // PostListWrapper\n    <div\n      ref={containerRef}\n      className=\"grid grid-cols-1 md:grid-cols-2 gap-5 w-full md:w-[725px] lg:w-[840px] my-0 mx-auto py-12 px-5 md:px-0 md:pt-16 md:pb-24\"\n    >\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }: PostListItemType) => (\n          <PostItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </div>\n  );\n};\n\nexport default PostList;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport '../tailwind.css';\nimport '../utils.css';\nimport Introduction from 'components/Main/Introduction';\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList';\nimport PostList from 'components/Main/PostList';\nimport Template from 'components/Common/Template';\nimport { PostListItemType } from 'types/PostItem.types';\nimport { graphql } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport queryString, { ParsedQuery } from 'query-string';\n\ntype IndexPageProps = {\n  location: {\n    search: string;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        description: string;\n        siteUrl: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostListItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n};\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  // URL의 Query 부분을 parse 함수를 통해 객체 형태로 변환\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All' // category 프로퍼티 값이 문자열 형태가 아니거나 존재하지 않는 경우 기본적으로 카테고리 값을 All로 지정,\n      : parsed.category; // 그러지 않은 경우에는 파싱한 값을 지정\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      {/* --> 삭제\n      <CategoryList\n        selectedCategory={selectedCategory}\n        categoryList={categoryList}\n      />\n      <-- */}\n      <PostList selectedCategory={selectedCategory} posts={edges} />\n    </Template>\n  );\n};\n\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: {\n        order: [DESC, DESC]\n        fields: [frontmatter___date, frontmatter___title]\n      }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profileImg\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;\n"],"names":["token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","decode","input","tokens","match","i","module","exports","encodedURI","TypeError","replace","replaceMap","exec","result","entries","Object","keys","key","customDecodeURIComponent","obj","predicate","ret","isArr","isArray","val","indexOf","strictUriEncode","decodeComponent","splitOnFirst","filterObject","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","value","encode","options","strict","encodeURIComponent","keysSorter","sort","a","b","Number","map","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","accumulator","undefined","includes","isEncodedArray","newValue","item","test","arrayValue","parserForArrayFormat","create","param","k","reduce","Boolean","stringify","object","shouldFilter","skipNull","skipEmptyString","index","keyValueSep","encoderForArrayFormat","objectCopy","filter","x","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","getHash","pick","exclude","exclusionFilter","string","separator","separatorIndex","str","charCodeAt","toString","toUpperCase","_ref","profileImage","___EmotionJSX","GatsbyImage","className","image","alt","ProfileImage","title","date","categories","summary","thumbnail","childImageSharp","gatsbyImageData","link","Link","to","category","selectedCategory","posts","containerRef","useRef","observer","count","setCount","useState","postListByCategory","useMemo","node","frontmatter","useEffect","current","IntersectionObserver","isIntersecting","unobserve","target","children","observe","postList","useInfiniteScroll","ref","_ref2","id","fields","slug","PostItem","_extends","location","search","data","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","publicURL","parsed","list","forEach","All","Template","Introduction","PostList"],"sourceRoot":""}